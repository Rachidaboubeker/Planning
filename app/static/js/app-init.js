/**
 * Planning Restaurant - Initialisation de l'application (VERSION CORRIG√âE)
 * Point d'entr√©e principal pour d√©marrer l'application
 */

// Variable pour √©viter la double initialisation
let isAppInitialized = false;

/**
 * Initialise l'application compl√®te
 */
async function initializeApp() {
    if (isAppInitialized) {
        console.log('‚ö†Ô∏è Application d√©j√† initialis√©e');
        return;
    }

    try {
        console.log('üöÄ Initialisation de l\'application Planning Restaurant...');

        // V√©rifier que les objets essentiels existent
        await waitForEssentialObjects();

        // Initialiser les gestionnaires
        await initializeManagers();

        // Charger les donn√©es
        await loadInitialData();

        // Initialiser l'interface
        await initializeInterface();

        // Finaliser
        finalizeInitialization();

        isAppInitialized = true;
        console.log('‚úÖ Application initialis√©e avec succ√®s');

    } catch (error) {
        console.error('‚ùå Erreur lors de l\'initialisation:', error);
        showFallbackError(error);
    }
}

/**
 * Attend que les objets essentiels soient charg√©s
 */
async function waitForEssentialObjects() {
    const requiredObjects = [
        'PlanningConfig', 'AppState', 'PlanningUtils', 'EventBus'
    ];

    let attempts = 0;
    const maxAttempts = 50; // 5 secondes max

    while (attempts < maxAttempts) {
        const missing = requiredObjects.filter(obj => typeof window[obj] === 'undefined');

        if (missing.length === 0) {
            console.log('‚úÖ Tous les objets essentiels sont charg√©s');
            return;
        }

        if (attempts % 10 === 0) {
            console.log(`‚è≥ Attente des objets: ${missing.join(', ')}`);
        }

        await new Promise(resolve => setTimeout(resolve, 100));
        attempts++;
    }

    throw new Error('Timeout: objets essentiels non charg√©s');
}

/**
 * Initialise les gestionnaires
 */
async function initializeManagers() {
    console.log('üîß Initialisation des gestionnaires...');

    // APIManager
    if (typeof APIManager !== 'undefined') {
        console.log('‚úÖ APIManager pr√™t');
    }

    // NotificationManager
    if (typeof NotificationManager !== 'undefined') {
        console.log('‚úÖ NotificationManager pr√™t');
    }

    // AvatarManager
    if (typeof window.avatarManager === 'undefined' && typeof AvatarManager !== 'undefined') {
        window.avatarManager = new AvatarManager();
        console.log('‚úÖ AvatarManager initialis√©');
    }

    // ColorManager
    if (typeof ColorManager !== 'undefined') {
        console.log('‚úÖ ColorManager pr√™t');
    }

    // PlanningRenderer
    if (typeof PlanningRenderer !== 'undefined') {
        console.log('‚úÖ PlanningRenderer pr√™t');
    }

    console.log('‚úÖ Gestionnaires initialis√©s');
}

/**
 * Charge les donn√©es initiales
 */
async function loadInitialData() {
    console.log('üì• Chargement des donn√©es initiales...');

    try {
        // R√©cup√©rer les donn√©es depuis les templates ou l'API
        if (typeof window.FLASK_DATA !== 'undefined') {
            loadDataFromFlask();
        } else if (typeof APIManager !== 'undefined') {
            await loadDataFromAPI();
        } else {
            console.warn('‚ö†Ô∏è Aucune source de donn√©es disponible');
        }

        // Initialiser les structures de donn√©es
        if (typeof initializeDataStructures === 'function') {
            initializeDataStructures();
        }

        console.log('‚úÖ Donn√©es charg√©es');

    } catch (error) {
        console.warn('‚ö†Ô∏è Erreur lors du chargement des donn√©es:', error);
        // Continuer avec des donn√©es vides
        AppState.employees = new Map();
        AppState.shifts = new Map();
    }
}

/**
 * Charge les donn√©es depuis Flask (templates)
 */
function loadDataFromFlask() {
    console.log('üìä Chargement depuis Flask...');

    const data = window.FLASK_DATA;

    // Charger les employ√©s
    if (data.employees) {
        AppState.employees.clear();
        data.employees.forEach(emp => {
            AppState.employees.set(emp.id, emp);
        });
        console.log(`üë• ${data.employees.length} employ√©s charg√©s`);
    }

    // Charger les cr√©neaux
    if (data.shifts) {
        AppState.shifts.clear();
        data.shifts.forEach(shift => {
            AppState.shifts.set(shift.id, shift);
        });
        console.log(`üìÖ ${data.shifts.length} cr√©neaux charg√©s`);
    }
}

/**
 * Charge les donn√©es depuis l'API
 */
async function loadDataFromAPI() {
    console.log('üåê Chargement depuis l\'API...');

    try {
        // Charger les employ√©s
        const employeesResponse = await APIManager.get('/employees');
        if (employeesResponse.success) {
            AppState.employees.clear();
            employeesResponse.employees.forEach(emp => {
                AppState.employees.set(emp.id, emp);
            });
            console.log(`üë• ${employeesResponse.employees.length} employ√©s charg√©s`);
        }

        // Charger les cr√©neaux
        const shiftsResponse = await APIManager.get('/shifts');
        if (shiftsResponse.success) {
            AppState.shifts.clear();
            shiftsResponse.shifts.forEach(shift => {
                AppState.shifts.set(shift.id, shift);
            });
            console.log(`üìÖ ${shiftsResponse.shifts.length} cr√©neaux charg√©s`);
        }

    } catch (error) {
        console.warn('‚ö†Ô∏è Erreur API:', error);
        throw error;
    }
}

/**
 * Initialise l'interface utilisateur
 */
async function initializeInterfaceLegacy() {
    console.log('üé® Initialisation de l\'interface...');

    // G√©n√©rer la grille de planning
    if (typeof PlanningRenderer !== 'undefined') {
        // Attendre que le DOM soit pr√™t
        await waitForElement('#planningGrid');
        PlanningRenderer.generatePlanningGrid();
        console.log('‚úÖ Grille de planning cr√©√©e');
    }

    // Mettre √† jour la l√©gende
    if (typeof PlanningUI !== 'undefined') {
        PlanningUI.updateLegend();
        PlanningUI.updateQuickStats();
        console.log('‚úÖ Interface mise √† jour');
    }

    // Initialiser la navigation semaine
    if (typeof updateWeekDisplay === 'function') {
        updateWeekDisplay();
    }
}
async function initializeInterface() {
        console.log('üé® Initialisation de l\'interface...');

        // G√©n√©rer la grille de planning
        if (typeof PlanningRenderer !== 'undefined') {
            // Attendre que le DOM soit pr√™t
            await waitForElement('#planningGrid');
            PlanningRenderer.generatePlanningGrid(); // Utilise maintenant le syst√®me de colonnes
            console.log('‚úÖ Grille de planning cr√©√©e');
        }

        // üÜï INITIALISER LE SYST√àME DE COLONNES
        if (typeof employeeColumnManager !== 'undefined') {
            employeeColumnManager.initializeEmployeeColumns();
            console.log('‚úÖ Syst√®me de colonnes initialis√©');
        }

        // Mettre √† jour la l√©gende (utilise maintenant le syst√®me de colonnes)
        if (typeof PlanningUI !== 'undefined') {
            PlanningUI.updateLegend();
            PlanningUI.updateQuickStats();
            console.log('‚úÖ Interface mise √† jour');
        }

        console.log('üéâ Interface initialis√©e avec succ√®s');
    }

/**
 * Attend qu'un √©l√©ment existe dans le DOM
 */
function waitForElement(selector) {
    return new Promise((resolve) => {
        const element = document.querySelector(selector);
        if (element) {
            resolve(element);
            return;
        }

        const observer = new MutationObserver(() => {
            const element = document.querySelector(selector);
            if (element) {
                observer.disconnect();
                resolve(element);
            }
        });

        observer.observe(document.body, {
            childList: true,
            subtree: true
        });
    });
}

/**
 * Finalise l'initialisation
 */
function finalizeInitialization() {
    // √âmettre l'√©v√©nement de fin d'initialisation
    if (typeof EventBus !== 'undefined') {
        EventBus.emit(PlanningEvents.DATA_LOADED, {
            employees: AppState.employees.size,
            shifts: AppState.shifts.size
        });
    }

    // Masquer les indicateurs de chargement
    const loadingElements = document.querySelectorAll('.loading, .spinner');
    loadingElements.forEach(el => {
        el.style.display = 'none';
    });

    // Afficher l'application
    const appElements = document.querySelectorAll('.app-content, .main-content');
    appElements.forEach(el => {
        el.style.visibility = 'visible';
        el.style.opacity = '1';
    });

    console.log('üéØ Initialisation finalis√©e');
}

// üÜï AJOUTER CETTE FONCTION POUR R√âINITIALISER LES COLONNES LORS D'AJOUT/SUPPRESSION D'EMPLOY√âS :
function refreshEmployeeColumns() {
        if (typeof employeeColumnManager !== 'undefined') {
            employeeColumnManager.reset();
            employeeColumnManager.initializeEmployeeColumns();

            // R√©g√©n√©rer la grille et la l√©gende
            if (typeof PlanningRenderer !== 'undefined') {
                PlanningRenderer.generatePlanningGrid();
            }

            if (typeof PlanningUI !== 'undefined') {
                PlanningUI.updateLegend();
            }

            console.log('üîÑ Colonnes d\'employ√©s actualis√©es');
        }
    }

/**
 * Affiche une erreur de fallback
 */
function showFallbackError(error) {
    console.error('üí• Erreur critique:', error);

    // Essayer d'afficher une notification
    if (typeof NotificationManager !== 'undefined') {
        NotificationManager.show('Erreur lors du chargement de l\'application', 'error');
    } else {
        // Fallback basique
        alert('Erreur lors du chargement de l\'application. Veuillez recharger la page.');
    }
}

/**
 * Point d'entr√©e principal
 */
document.addEventListener('DOMContentLoaded', () => {
    // D√©marrer l'initialisation apr√®s un petit d√©lai
    setTimeout(initializeApp, 100);
});

// R√©initialisation en cas de probl√®me
window.reinitializeApp = function() {
    isAppInitialized = false;
    initializeApp();
};

// Export pour d√©bogage
window.AppInitializer = {
    initialize: initializeApp,
    reinitialize: window.reinitializeApp,
    isInitialized: () => isAppInitialized
};

console.log('üîß App-init charg√© (version corrig√©e)');