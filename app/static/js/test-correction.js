/**
 * Planning Restaurant - Script de test des corrections
 * Pour v√©rifier que les probl√®mes sont r√©solus
 */

// Fonction de test √† ex√©cuter dans la console
window.testCorrections = function() {
    console.log('üß™ D√âBUT DES TESTS DE CORRECTION\n');

    const results = {
        errorsFixed: false,
        gridAlignment: false,
        noOverlapping: false,
        modulesLoaded: false
    };

    // TEST 1: V√©rifier que les erreurs JavaScript sont corrig√©es
    console.log('Test 1: Erreurs JavaScript...');
    try {
        const requiredObjects = ['Logger', 'PlanningConfig', 'AppState', 'EventBus', 'PlanningUtils'];
        const missing = requiredObjects.filter(obj => typeof window[obj] === 'undefined');

        if (missing.length === 0) {
            console.log('‚úÖ Tous les objets globaux sont d√©finis');
            results.errorsFixed = true;
        } else {
            console.log('‚ùå Objets manquants:', missing);
        }
    } catch (error) {
        console.log('‚ùå Erreur lors du test des objets:', error);
    }

    // TEST 2: V√©rifier l'alignement de la grille
    console.log('\nTest 2: Alignement de la grille...');
    const grid = document.getElementById('planningGrid');
    if (grid) {
        const timeSlots = grid.querySelectorAll('.time-slot');
        const scheduleCells = grid.querySelectorAll('.schedule-cell');

        if (timeSlots.length > 0 && scheduleCells.length > 0) {
            // V√©rifier que les heures sont dans la premi√®re colonne
            const firstTimeSlot = timeSlots[0];
            const gridColumn = window.getComputedStyle(firstTimeSlot).gridColumn;

            if (gridColumn === '1') {
                console.log('‚úÖ Heures correctement align√©es en premi√®re colonne');
                results.gridAlignment = true;
            } else {
                console.log('‚ùå Probl√®me d\'alignement des heures, colonne:', gridColumn);
            }
        } else {
            console.log('‚ùå Grille non trouv√©e ou vide');
        }
    } else {
        console.log('‚ùå √âl√©ment planningGrid non trouv√©');
    }

    // TEST 3: V√©rifier l'absence de superposition
    console.log('\nTest 3: Superposition des cr√©neaux...');
    const shiftBlocks = document.querySelectorAll('.shift-block');
    if (shiftBlocks.length > 0) {
        console.log(`Trouv√© ${shiftBlocks.length} cr√©neaux`);

        // Grouper par position pour d√©tecter les superpositions
        const positionGroups = new Map();
        let overlappingFound = false;

        shiftBlocks.forEach(block => {
            const rect = block.getBoundingClientRect();
            const key = `${Math.round(rect.top)}-${Math.round(rect.left)}`;

            if (!positionGroups.has(key)) {
                positionGroups.set(key, []);
            }
            positionGroups.get(key).push(block);
        });

        // V√©rifier si des cr√©neaux multiples sont c√¥te √† c√¥te (pas superpos√©s)
        positionGroups.forEach((blocks, position) => {
            if (blocks.length > 1) {
                // V√©rifier qu'ils sont c√¥te √† c√¥te, pas superpos√©s
                const rects = blocks.map(b => b.getBoundingClientRect());
                const widths = rects.map(r => r.width);
                const expectedWidth = rects[0].width;

                // Si tous ont la m√™me largeur ET sont plus petits que la cellule, c'est bon
                const aresSideBySide = widths.every(w => Math.abs(w - expectedWidth) < 5);

                if (aresSideBySide && expectedWidth < 150) {
                    console.log(`‚úÖ ${blocks.length} cr√©neaux c√¥te √† c√¥te √† la position ${position}`);
                } else {
                    console.log(`‚ö†Ô∏è Possible superposition √† la position ${position}`);
                    overlappingFound = true;
                }
            }
        });

        if (!overlappingFound) {
            console.log('‚úÖ Aucune superposition d√©tect√©e');
            results.noOverlapping = true;
        }
    } else {
        console.log('‚ö†Ô∏è Aucun cr√©neau trouv√© (normal si pas de donn√©es)');
        results.noOverlapping = true; // Pas de cr√©neaux = pas de superposition
    }

    // TEST 4: V√©rifier le chargement des modules
    console.log('\nTest 4: Modules charg√©s...');
    const expectedModules = [
        'APIManager', 'NotificationManager', 'ColorManager',
        'AvatarManager', 'PlanningManager', 'PlanningRenderer', 'PlanningUI'
    ];

    const loadedModules = expectedModules.filter(mod => typeof window[mod] !== 'undefined');
    const missingModules = expectedModules.filter(mod => typeof window[mod] === 'undefined');

    console.log(`‚úÖ Modules charg√©s (${loadedModules.length}/${expectedModules.length}):`, loadedModules);
    if (missingModules.length > 0) {
        console.log('‚ùå Modules manquants:', missingModules);
    }

    results.modulesLoaded = missingModules.length === 0;

    // R√âSUM√â
    console.log('\nüìä R√âSUM√â DES TESTS:');
    console.log('='.repeat(50));
    console.log(`Erreurs JS corrig√©es: ${results.errorsFixed ? '‚úÖ' : '‚ùå'}`);
    console.log(`Grille align√©e: ${results.gridAlignment ? '‚úÖ' : '‚ùå'}`);
    console.log(`Pas de superposition: ${results.noOverlapping ? '‚úÖ' : '‚ùå'}`);
    console.log(`Modules charg√©s: ${results.modulesLoaded ? '‚úÖ' : '‚ùå'}`);

    const allGood = Object.values(results).every(r => r);
    console.log(`\nüéØ √âTAT GLOBAL: ${allGood ? '‚úÖ TOUT FONCTIONNE' : '‚ùå PROBL√àMES D√âTECT√âS'}`);

    return results;
};

// Fonction pour forcer une re-g√©n√©ration de la grille
window.forceGridRegeneration = function() {
    console.log('üîÑ Force la r√©g√©n√©ration de la grille...');

    if (typeof PlanningRenderer !== 'undefined') {
        PlanningRenderer.generatePlanningGrid();
        console.log('‚úÖ Grille r√©g√©n√©r√©e avec PlanningRenderer');
    } else {
        console.log('‚ùå PlanningRenderer non disponible');
    }
};

// Fonction pour d√©bugger les positions des cr√©neaux
window.debugShiftPositions = function() {
    console.log('üîç D√âBOGAGE DES POSITIONS DES CR√âNEAUX');

    const shifts = document.querySelectorAll('.shift-block');
    if (shifts.length === 0) {
        console.log('‚ùå Aucun cr√©neau trouv√©');
        return;
    }

    console.log(`Trouv√© ${shifts.length} cr√©neaux:`);
    console.log('Index | Employee | Day | Hours | Position | Size');
    console.log('-'.repeat(60));

    shifts.forEach((shift, index) => {
        const rect = shift.getBoundingClientRect();
        const employeeId = shift.dataset.employeeId;
        const day = shift.dataset.day;
        const startHour = shift.dataset.startHour;
        const duration = shift.dataset.duration;

        const employee = AppState?.employees?.get(employeeId);
        const name = employee ? employee.nom_complet : 'Inconnu';

        console.log(
            `${index.toString().padStart(5)} | ` +
            `${name.padEnd(10)} | ` +
            `${day.padEnd(8)} | ` +
            `${startHour}h-${duration}h | ` +
            `${Math.round(rect.left)},${Math.round(rect.top)} | ` +
            `${Math.round(rect.width)}x${Math.round(rect.height)}`
        );
    });
};

// Fonction pour corriger manuellement si besoin
window.manualFix = function() {
    console.log('üõ†Ô∏è CORRECTION MANUELLE...');

    // 1. Nettoyer la grille
    const grid = document.getElementById('planningGrid');
    if (grid) {
        grid.innerHTML = '';
        console.log('‚úÖ Grille nettoy√©e');
    }

    // 2. Cr√©er les objets manquants
    if (typeof SystemRepair !== 'undefined' && SystemRepair.createMissingGlobals) {
        SystemRepair.createMissingGlobals();
        console.log('‚úÖ Objets globaux cr√©√©s');
    }

    // 3. R√©g√©n√©rer la grille
    setTimeout(() => {
        if (typeof PlanningRenderer !== 'undefined') {
            PlanningRenderer.generatePlanningGrid();
            console.log('‚úÖ Grille r√©g√©n√©r√©e');
        }
    }, 100);

    console.log('üéØ Correction manuelle termin√©e');
};

// Auto-test au chargement (optionnel)
document.addEventListener('DOMContentLoaded', () => {
    // Attendre que tout soit charg√©
    setTimeout(() => {
        console.log('üîç Test automatique des corrections...');
        const results = window.testCorrections();

        if (!Object.values(results).every(r => r)) {
            console.log('\n‚ö†Ô∏è Des probl√®mes ont √©t√© d√©tect√©s. Utilisez les fonctions suivantes pour d√©bugger:');
            console.log('- testCorrections() : Re-tester tout');
            console.log('- forceGridRegeneration() : Forcer la r√©g√©n√©ration');
            console.log('- debugShiftPositions() : Voir les positions des cr√©neaux');
            console.log('- manualFix() : Correction manuelle');
        }
    }, 2000);
});

console.log('üß™ Script de test des corrections charg√©');
console.log('üí° Utilisez testCorrections() dans la console pour tester');